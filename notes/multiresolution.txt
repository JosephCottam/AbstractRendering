Mulitple resolutions (e.g. rendering for different view transforms):
(note: Driver is the aggregates because they are tied to the resolution, 
so transfer function is largely adjunct and not discussed in this document.)

If LOD is tied to a tile server, data does no need to be spatialy distributed.
However, all tiles get formed "at once," so tile-by-tile production is not
probable.  If data is spatially distributed (quad-tree or similar) then 
then approaches described below are applicable per-tile.


Approach 1:
Each level-of-detail is its own abstract rendering problem.
Therefore, for each view transform, specify an aggregator.
Visual continuity between different levels of detail relies on 
specifying the correct aggregators at each level.  
+ No additional work required
+ Embarassingly parallel (each LOD is independent)
- Visual continuity is not provided, relies on aggregator selection
+ Flexible representation at different aggreagate levels 
  (when you don't want it, is continuinity doesn't get in the way)

Approach 2:
Extend aggregate reducers so it can go between LOD, 
do standard AR at the most-detailed level and then build up.
Essentially needs a neighborhood pattern and a reduction in that neighborhood.
+ Visual continuity is provided by the application of a set
  reduction from the eventual "base" representation
? Successive LOD *may* be parallel with each other (depending on the 
  neighborhood and aggreagate reduction function used)
- Initial, highly-detailed, aggregate production is a prefix 
  (at least per-tile).
+ Extends the idea of multi-stage transformations in abstract rendering.

