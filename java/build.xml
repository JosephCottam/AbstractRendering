<project name="AbstractRendering" default="build" basedir="."
  xmlns:ivy="antlib:org.apache.ivy.ant">

  <property name="bin" value="bin"/>
  <property name="appSrc" value="app"/>
  <property name="appBin" value="${bin}/appBin" />
  <property name="appJar" value="ARApp.jar" />
  
  <property name="testSrc" value="test"/>
  <property name="testBin" value="${bin}/test"/>
  <property name="results" value="testResults"/>

  <property name="extSrc" value="ext"/>
  <property name="coreSrc" value="core"/>
  <property name="coreBin" value="${bin}/coreBin" />
  <property name="coreJar" value="AR.jar" />
  
  <property name="docs" value="docs" />
  <property name="lib" value="./lib"/>


  <!--Will exclude spark extensions if the spark jar is not found-->
  <available property="spark.absent" file="./lib/spark-core-assembly-0.7.2.jar"  value="false"/>
  <property name="spark.absent" value="true"/>

  <target name="build" description="Main build target." depends="clean,fetch,core,app,docs" />

  <target name="clean" description="Cleanup build artifacts.">
    <delete dir="${bin}"/>
    <delete dir="${docs}"/>
    <delete file="AR.jar"/>
    <delete file="ARApp.jar"/>
  </target>


  <target name="core" description="Build core system.">
    <mkdir dir="${coreBin}"/>
    <javac destdir="${coreBin}" target="1.7"
      includeantruntime="false" debug="true" debuglevel="lines,source"
      sourcepath="" srcdir="${coreSrc}">
    </javac>
    
    <antcall target="package">
      <param name="file" value="${coreJar}"/>
      <param name="bin" value="${coreBin}"/>
      <param name="main" value=""/>
    </antcall>
  </target>


  <target name="docs" description="Produce documents for most-recently-built configuration.">
    <antcall target="_docs">
      <param name="src" value="${coreSrc}"/>
      <param name="jars" value=""/>
    </antcall>
  </target>


  <target name="ext" 
    description="Build the extensions libraries with the core system; this is core-plus.">
    <!--Include extensions with the core library.-->

    <mkdir dir="${coreBin}"/>
    <javac destdir="${coreBin}" sourcepath="" srcdir="${coreSrc}:${extSrc}" 
      includeantruntime="false" debug="true" debuglevel="lines,source">

      <exclude name="**/spark/**" if="spark.absent"/>
      <classpath>
        <fileset dir="${lib}" includes="*.jar"/>
      </classpath>
    </javac>

    <!--Copy additional resources over...-->
    <copy todir="${coreBin}">
      <fileset dir="${extSrc}" includes="**/*.avsc"/>
    </copy>

    <javadoc destdir="${docs}" verbose="false">
      <doclet name="com.visural.doclets.markdown.standard.Standard" 
        path="${lib}/MarkdownDoclet.jar"/>
      <fileset dir="${coreSrc}"/>
      <fileset dir="${appSrc}" />
      <fileset dir="${extSrc}">
        <exclude name="**/spark/**" if="spark.absent"/>
        <exclude name="**/*.md" />
        <exclude name="**/*.avsc" />
      </fileset>
      <classpath>
        <fileset dir="${lib}" includes="*.jar"/>
      </classpath>
    </javadoc>

    <antcall target="package">
      <param name="file" value="${coreJar}"/>
      <param name="bin" value="${coreBin}"/>
      <param name="main" value="ar.ext.server.ARServer"/>
    </antcall>
    
  </target>


  <target name="app" depends="core" description="Build the demo app.  Parallel to core (or ext).">
    <mkdir dir="${appBin}"/>
    <javac destdir="${appBin}" sourcepath="" srcdir="${appSrc}"
      includeantruntime="false" debug="true" debuglevel="lines,source">
      <classpath>
        <fileset dir="." includes="*.jar"/>
        <fileset dir="${lib}" includes="*.jar"/>
      </classpath>
    </javac>
  
    <antcall target="package">
      <param name="file" value="${appJar}"/>
      <param name="bin" value="${appBin}"/>
      <param name="main" value="ar.app.ARApp"/>
      <param name="classpath" value="AR.jar"/>
    </antcall>
  </target>

  <target name="_docs" >
    <javadoc destdir="${docs}">
      <doclet name="com.visural.doclets.markdown.standard.Standard" 
        path="${lib}/MarkdownDoclet.jar"/>
      <sourcepath>
        <pathelement path="${src}"/>
      </sourcepath>
      <classpath>
        <fileset dir="${jars}" includes="*.jar"/>
      </classpath>
    </javadoc>
  </target>

  <target name="package" >
    <jar jarfile="${file}" includes="*.class" basedir=".">
      <fileset dir="${bin}"/>
      <manifest>
        <attribute name="Created-By" value=""/>
        <attribute name="Main-Class" value="${main}"/>
        <attribute name="Class-Path" value="${classpath}"/>
      </manifest>
    </jar>
  </target>

  <target name="test" description="Unit tests; must build full system (ext and app).">
    <mkdir dir="${results}"/>
    <mkdir dir="${testBin}"/>
    
    <javac destdir="${testBin}" sourcepath="" srcdir="${testSrc}"
      includeantruntime="false" debug="true" debuglevel="lines,source">
      <classpath>
        <fileset dir="." includes="*.jar"/>
        <fileset dir="${lib}" includes="*.jar"/>
      </classpath>
    </javac>

    <junit haltonfailure="no" fork="true" showoutput="true">
      <classpath>
        <pathelement location="${testBin}"/>
        <fileset dir="${lib}" includes="**/*.jar"/>
        <fileset dir="." includes="**/*.jar"/>
      </classpath>

      <formatter type="brief" usefile="false"/>
      <formatter type="plain"/>
      
      <batchtest todir="${results}">
        <fileset dir="${testSrc}">
          <include name="**/*Test*"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="clean-deep" depends="clean, deep-clean" description="Clean up all items (builds, dependencies and uninstall ivy)."/>
  <target name="clean-depends" description="Remove downloaded dependencies.">
    <delete dir="${lib}"/>
  </target>





<!-- Tasks for interacting Ivy with Ant-->
  <property name="ivy.install.version" value="2.1.0-rc2" />
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${user.home}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

  <target name="download" unless="offline">
    <mkdir dir="${ivy.jar.dir}"/>
    <!-- download Ivy from web site so that it can be used even without any special installation -->
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
      dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="init" depends="download">
    <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
      uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <target name="deep-clean" depends="init" >
    <!--Remove ivy from the place where this script would install it and all dependencies.
         Use with caution, will remove ivy from the specified location, even if it
         was not put there by this script in the first place.-->
    <cleancache/>
    <delete dir="${lib}"/>
    <delete dir="${ivy.jar.dir}"/>
  </target>

  <target name="fetch-dev" description="Fetch dependencies need for development.">
    <!--Some things are only needed by developers, get those with this task.-->
    <ivy:retrieve conf="dev"/>
  </target>

  <target name="fetch" depends="init,markdown" description="Fetch runtime/basic-build dependencies">
    <ivy:retrieve conf="deploy"/>
  </target>

  <target name="markdown">
    <!--Couldn't find a place for ivy to get the markdown plugin, 
         so we use the get task insetad -->
    <mkdir dir="${lib}"/>
    <get src="https://markdown-doclet.googlecode.com/files/MarkdownDoclet-3.0.jar"
      dest="${lib}/MarkdownDoclet.jar"
      verbose="on"  
      skipexisting="true"
      />
  </target>
</project>
