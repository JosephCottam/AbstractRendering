<project name="AbstractRendering" default="build" basedir=".">
  <property name="bin" value="bin"/>
  <property name="appSrc" value="app"/>
  <property name="appBin" value="${bin}/appBin" />
  <property name="appJar" value="ARApp.jar" />
  <property name="extSrc" value="ext"/>
  <property name="coreSrc" value="core"/>
  <property name="coreBin" value="${bin}/coreBin" />
  <property name="coreJar" value="AR.jar" />
  <property name="docs" value="docs" />
  <property name="lib" value="./lib"/>


  <!--Will exclude spark extensions if the spark jar is not found-->
  <available property="spark.absent" file="./lib/spark-core-assembly-0.7.2.jar"  value="false"/>
  <property name="spark.absent" value="true"/>

  <target name="build" depends="clean,depends,core,app" />

  <target name="clean">
    <delete dir="${bin}"/>
    <delete dir="${docs}"/>
    <delete file="AR.jar"/>
    <delete file="ARApp.jar"/>
  </target>


  <target name="core">
    <mkdir dir="${coreBin}"/>
    <javac destdir="${coreBin}" target="1.7" includeantruntime="false"
      sourcepath="" srcdir="${coreSrc}">
    </javac>
    
    <antcall target="package">
      <param name="file" value="${coreJar}"/>
      <param name="bin" value="${coreBin}"/>
      <param name="main" value=""/>
    </antcall>
    <antcall target="_docs">
      <param name="src" value="${coreSrc}"/>
      <param name="jars" value=""/>
    </antcall>
  </target>


  <target name="docs">
    <antcall target="_docs">
      <param name="src" value="${coreSrc}"/>
      <param name="jars" value=""/>
    </antcall>
  </target>


  <target name="onesix" depends="clean">
    <!--Variant of the core libraries that does not include
         any java 1.7 items...hopefully.-->
    <mkdir dir="${coreBin}"/>
    
    <javac destdir="${coreBin}" source="1.6" target="1.6" includeantruntime="false"
      sourcepath="" srcdir="${coreSrc}:${extSrc}">
      <exclude name="**/ARServer*"/> 
      <exclude name="**/Parallel*"/>
      <exclude name="**/MemMapList*"/> 
      <exclude name="**/tiles/**"/>
      <classpath>
        <fileset dir="${lib}" includes="*.jar"/>
      </classpath>
    </javac>
    
    <antcall target="package">
      <param name="file" value="${coreJar}"/>
      <param name="bin" value="${coreBin}"/>
      <param name="main" value="ar.ext.server.ARServer"/>
    </antcall>
  </target>


  <target name="ext" >
    <!--Include extensions with the core library.-->

    <mkdir dir="${coreBin}"/>
    <javac destdir="${coreBin}" sourcepath="" srcdir="${coreSrc}:${extSrc}" 
      includeantruntime="false">
      <exclude name="**/spark/**" if="spark.absent"/>
      <classpath>
        <fileset dir="${lib}" includes="*.jar"/>
      </classpath>
    </javac>

    <javadoc destdir="${docs}" verbose="false">
      <doclet name="com.visural.doclets.markdown.standard.Standard" 
        path="${lib}/MarkdownDoclet.jar"/>
      <fileset dir="${coreSrc}"/>
      <fileset dir="${appSrc}" />
      <fileset dir="${extSrc}">
        <exclude name="**/spark/**" if="spark.absent"/>
        <exclude name="**/*.md" />
        <exclude name="**/*.avsc" />
      </fileset>
      <classpath>
        <fileset dir="${lib}" includes="*.jar"/>
      </classpath>
    </javadoc>
    <antcall target="package">
      <param name="file" value="${coreJar}"/>
      <param name="bin" value="${coreBin}"/>
      <param name="main" value="ar.ext.server.ARServer"/>
    </antcall>
    
  </target>


  <target name="app" depends="core">
    <mkdir dir="${appBin}"/>
    <javac destdir="${appBin}" sourcepath="" srcdir="${appSrc}"
      includeantruntime="false">
      <classpath>
        <fileset dir="." includes="*.jar"/>
      </classpath>
    </javac>
  
    <antcall target="package">
      <param name="file" value="${appJar}"/>
      <param name="bin" value="${appBin}"/>
      <param name="main" value="ar.app.ARApp"/>
      <param name="classpath" value="AR.jar"/>
    </antcall>
  </target>

  <target name="_docs" >
    <javadoc destdir="${docs}">
      <doclet name="com.visural.doclets.markdown.standard.Standard" 
        path="${lib}/MarkdownDoclet.jar"/>
      <sourcepath>
        <pathelement path="${src}"/>
      </sourcepath>
      <classpath>
        <fileset dir="${jars}" includes="*.jar"/>
      </classpath>
    </javadoc>
  </target>

  <target name="package" >
    <jar jarfile="${file}" includes="*.class" basedir=".">
      <fileset dir="${bin}"/>
      <manifest>
        <attribute name="Created-By" value=""/>
        <attribute name="Main-Class" value="${main}"/>
        <attribute name="Class-Path" value="${classpath}"/>
      </manifest>
    </jar>
  </target>

  <include file="ivy-ant.xml" as="ivy"/> 
  <target name="depends" depends="ivy.fetch"/>
  <target name="depends-dev" depends="ivy.fetch-dev"/>
  <target name="clean-deep" depends="clean,ivy.deep-clean"/>
  <target name="clean-depends">
    <delete dir="${lib}"/>
  </target>
</project>
